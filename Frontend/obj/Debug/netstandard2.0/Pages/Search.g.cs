#pragma checksum "D:\Study\GuoHanwen\Master\Info6250\FinalProject\Frontend\Pages\Search.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "cec73920e1e3dad299de6117b825431cb0f12df9"
// <auto-generated/>
#pragma warning disable 1591
namespace Frontend.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using Microsoft.JSInterop;
    using Frontend;
    using Frontend.Models.domain;
    using Frontend.Shared;
    using Newtonsoft.Json;
    using Cloudcrate.AspNetCore.Blazor.Browser.Storage;
    using System.Net;
    using System.IO;
    using Newtonsoft.Json.Linq;
    using Microsoft.AspNetCore.Http;
    using System.Diagnostics;
    using System.Text;
    using System.Net.Http.Headers;
    using Microsoft.AspNetCore.Blazor.RenderTree;
    using Google.Apis.Auth.OAuth2;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/search")]
    public class Search : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
            base.BuildRenderTree(builder);
#line 6 "D:\Study\GuoHanwen\Master\Info6250\FinalProject\Frontend\Pages\Search.cshtml"
 if (movies == null || movies.Count==0)
{

#line default
#line hidden
            builder.AddContent(0, "    ");
            builder.AddMarkupContent(1, "<h1>Result Not Found</h1>\n");
#line 9 "D:\Study\GuoHanwen\Master\Info6250\FinalProject\Frontend\Pages\Search.cshtml"
}
else
{
    foreach (var movie in movies)
    {

#line default
#line hidden
            builder.AddContent(2, "        ");
            builder.OpenElement(3, "div");
            builder.AddAttribute(4, "class", "row");
            builder.AddMarkupContent(5, "\n            <div class=\"col-md-2\"></div>\n            ");
            builder.OpenElement(6, "div");
            builder.AddAttribute(7, "class", "col-md-8");
            builder.AddContent(8, "\n                ");
            builder.OpenElement(9, "div");
            builder.AddAttribute(10, "class", "card flex-md-row mb-4 shadow-sm h-md-250");
            builder.AddContent(11, "\n                    ");
            builder.OpenElement(12, "div");
            builder.AddAttribute(13, "class", "card-body d-flex flex-column align-items-start");
            builder.AddContent(14, "\n                        ");
            builder.OpenElement(15, "h3");
            builder.AddAttribute(16, "class", "mb-0");
            builder.AddContent(17, "\n                            ");
            builder.OpenElement(18, "a");
            builder.AddAttribute(19, "class", "text-dark");
            builder.AddAttribute(20, "href", "movie/" + (movie.Title));
            builder.AddContent(21, movie.Title);
            builder.CloseElement();
            builder.AddContent(22, "\n                        ");
            builder.CloseElement();
            builder.AddMarkupContent(23, "\n                        <br>\n                        ");
            builder.OpenElement(24, "strong");
            builder.AddAttribute(25, "class", "d-inline-block mb-2 text-primary");
            builder.AddContent(26, "IMDB Rating: ");
            builder.AddContent(27, movie.imdbRating);
            builder.CloseElement();
            builder.AddMarkupContent(28, "\n                        Released:<br>\n                        ");
            builder.OpenElement(29, "p");
            builder.AddContent(30, movie.Released);
            builder.CloseElement();
            builder.AddMarkupContent(31, "\n                        Actors:<br>\n                        ");
            builder.OpenElement(32, "p");
            builder.AddContent(33, movie.Actors);
            builder.CloseElement();
            builder.AddMarkupContent(34, "\n                        Plot:<br>\n                        ");
            builder.OpenElement(35, "p");
            builder.AddContent(36, movie.Plot);
            builder.CloseElement();
            builder.AddContent(37, "\n                        Website: ");
            builder.OpenElement(38, "a");
            builder.AddAttribute(39, "target", "_blank");
            builder.AddAttribute(40, "href", movie.Website);
            builder.AddContent(41, movie.Website);
            builder.CloseElement();
            builder.AddContent(42, "\n                    ");
            builder.CloseElement();
            builder.AddContent(43, "\n                    ");
            builder.OpenElement(44, "img");
            builder.AddAttribute(45, "class", "card-img-right flex-auto d-none d-lg-block");
            builder.AddAttribute(46, "src", movie.Poster);
            builder.CloseElement();
            builder.AddContent(47, "\n                ");
            builder.CloseElement();
            builder.AddContent(48, "\n            ");
            builder.CloseElement();
            builder.AddContent(49, "\n        ");
            builder.CloseElement();
            builder.AddContent(50, "\n");
#line 36 "D:\Study\GuoHanwen\Master\Info6250\FinalProject\Frontend\Pages\Search.cshtml"
    }
}

#line default
#line hidden
        }
        #pragma warning restore 1998
#line 41 "D:\Study\GuoHanwen\Master\Info6250\FinalProject\Frontend\Pages\Search.cshtml"
            
    private string keywords { get; set; }
    private List<Movie> movies;

    protected override async Task OnInitAsync()
    {
        RefreshType();
        UriHelper.OnLocationChanged += OnLocationChanges;
        var searchResults = await Http.GetJsonAsync<SearchResults>("http://www.omdbapi.com/?s=" + keywords + "&apikey=1342bb");
        movies = searchResults.Search;
    }

    protected override async Task OnParametersSetAsync()
    {
        RefreshType();
        UriHelper.OnLocationChanged += OnLocationChanges;
        var searchResults = await Http.GetJsonAsync<SearchResults>("http://www.omdbapi.com/?s=" + keywords + "&apikey=1342bb");
        movies = searchResults.Search;
    }

    private void OnLocationChanges(object sender, string location) => RefreshType();

    private void RefreshType()
    {
        var uri = new Uri(UriHelper.GetAbsoluteUri());
        keywords = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("keywords", out var type) ? type.First() : "";
        StateHasChanged();
    }

    public void Dispose()
    {
        UriHelper.OnLocationChanged -= OnLocationChanges;
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper { get; set; }
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
