@page "/search"
@inject HttpClient Http
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper


@if (movies == null || movies.Count==0)
{
    <h1>Result Not Found</h1>
}
else
{
    foreach (var movie in movies)
    {
        <div class="row">
            <div class="col-md-2"></div>
            <div class="col-md-8">
                <div class="card flex-md-row mb-4 shadow-sm h-md-250">
                    <div class="card-body d-flex flex-column align-items-start">
                        <h3 class="mb-0">
                            <a class="text-dark" href="movie/@movie.Title">@movie.Title</a>
                        </h3>
                        <br>
                        <strong class="d-inline-block mb-2 text-primary">IMDB Rating: @movie.imdbRating</strong>
                        Released:<br>
                        <p>@movie.Released</p>
                        Actors:<br>
                        <p>@movie.Actors</p>
                        Plot:<br>
                        <p>@movie.Plot</p>
                        Website: <a href="@movie.Website" target="_blank">@movie.Website</a>
                    </div>
                    <img class="card-img-right flex-auto d-none d-lg-block" src="@movie.Poster">
                </div>
            </div>
        </div>
    }
}



@functions {
    private string keywords { get; set; }
    private List<Movie> movies;

    protected override async Task OnInitAsync()
    {
        RefreshType();
        UriHelper.OnLocationChanged += OnLocationChanges;
        var searchResults = await Http.GetJsonAsync<SearchResults>("http://www.omdbapi.com/?s=" + keywords + "&apikey=1342bb");
        movies = searchResults.Search;
    }

    protected override async Task OnParametersSetAsync()
    {
        RefreshType();
        UriHelper.OnLocationChanged += OnLocationChanges;
        var searchResults = await Http.GetJsonAsync<SearchResults>("http://www.omdbapi.com/?s=" + keywords + "&apikey=1342bb");
        movies = searchResults.Search;
    }

    private void OnLocationChanges(object sender, string location) => RefreshType();

    private void RefreshType()
    {
        var uri = new Uri(UriHelper.GetAbsoluteUri());
        keywords = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("keywords", out var type) ? type.First() : "";
        StateHasChanged();
    }

    public void Dispose()
    {
        UriHelper.OnLocationChanged -= OnLocationChanges;
    }
}

